#!/bin/sh
# Main user profile script
# It should be kept compatible with all shells (dash, bash,...)
if [ -z "$HOME" ]; then
  echo >&2 ".rc: \$HOME is not defined... Abort !"
  return 1
fi

# Main source function
rc_source() {
  # Global variables
  export RC_DIR="${RC_DIR:-$HOME}"
  export RC_DIR_LOCAL="${RC_DIR_LOCAL:-$HOME}"

  # Local variables
  local RC_SHELLOPTS="$(set +o | grep noglob)" # shell options
  local RC_LIST="$RC_DIR_LOCAL/.rc.tmp.list"
  local RC_VERBOSE="$RC_VERBOSE" # for recursive calls
  local RC_DRYRUN="$RC_DRYRUN" # for recursive calls
  local RC_ALL="$RC_ALL" # for recursive calls
  local RC_CNT=$(($RC_CNT+1))
  local RC_ERR=0

  ##############
  # Prerequisites
  command -v grep >/dev/null || { echo "Grep is missing..." ; return 1; }
  command -v awk >/dev/null || { echo "Awk is missing..." ; return 1; }
  command -v sed >/dev/null || { echo "Sed is missing..." ; return 1; }
  command -v head >/dev/null || { echo "Head is missing..." ; return 1; }
  command -v cut >/dev/null || { echo "Cut is missing..." ; return 1; }
  command -v sort >/dev/null || { echo "Sort is missing..." ; return 1; }
  unset -f grep awk sed head cut sort
  unalias grep awk sed head cut sort 2>/dev/null

  ##############
  # Log function
  rc_log() {
    eval "echo $@ ${RC_VERBOSE:->/dev/null}"
  }

  # Source file 
  rc_sourcefile() {
    local FILE FCT
    for FILE; do
      [ -r "$FILE" ] || continue
      local MINIFIED="${FILE%.*}.min"
      if [ -z "$BASH_VERSION" ] && head -c 40 "$FILE" | grep "bash" >/dev/null 2>&1; then
        rc_log "Skip bash file $FILE"
        continue
      fi
      if [ -r "$MINIFIED" ]; then
        FILE="$MINIFIED"
      fi
      if [ -r "$FILE" ]; then
        rc_log "Source '$FILE'"
        # Find all functions and unalias them
        # Take care of: fct defined in comments, minified files on one single line
        for FCT in $(grep -Eo '[a-zA-Z_]+\s*\(\)' "$FILE" | sed -e 's/\s*()//'); do
          ${RC_DRYRUN} unalias "$FCT" 2>/dev/null
        done
        # Source the file
        set --; eval "${RC_DRYRUN} . '$FILE' ${RC_VERBOSE:->/dev/null}" || 
          { RC_ERR=$?; rc_log "Return status not null"; }
      fi
    done
  }

  # Source script from list
  rc_sourcelist() {
    # Load files from "$RC_LIST" when they match pattern
    # Look for them in $RC_DIR and $RC_DIR_LOCAL
    local FILE PATTERN
    for PATTERN; do
      PATTERN="^${PATTERN##$RC_DIR/}|^${PATTERN##$RC_DIR_LOCAL/}"
      PATTERN="$(echo $PATTERN | sed -e 's/\./\./g; s/\*/.*/g')"
      for FILE in $(command grep -Ee "$PATTERN" "$RC_LIST" 2>/dev/null); do
        if [ -r "$RC_DIR/$FILE" ]; then
          rc_sourcefile "$RC_DIR/$FILE"
        elif [ -r "$RC_DIR_LOCAL/$FILE" ]; then
          rc_sourcefile "$RC_DIR_LOCAL/$FILE"
        fi
      done
    done
  }

  # Source module when executable (or all)
  rc_sourcemod() {
    local FILE PATTERN
    # Note: no double-quotes around $@ below !
    set -- $@
    for FILE; do
      if [ -n "$RC_ALL" ] || [ -x "$FILE" ]; then
        rc_sourcefile "$FILE"
      fi
    done
  }

  ##############
  # Process arguments
  local FLAGS OPTIND OPTARG OPTERR=0
  while getopts 'asvdr:l:' FLAGS; do
    case "$FLAGS" in
      a) RC_ALL="true";;
      s) RC_VERBOSE=">/dev/null 2>&1";;
      v) RC_VERBOSE=">&1";;
      d) RC_DRYRUN="true";;
      r) export RC_DIR="$OPTARG";;
      l) export RC_DIR_LOCAL="$OPTARG";;
      *) echo >&2 "Usage: .rc [-a] [-v] [-d]"
         echo >&2 "-a   load all scripts"
         echo >&2 "-s   silent mode"
         echo >&2 "-v   verbose mode"
         echo >&2 "-d   dry-run"
         kill -INT $$
         return 1
         ;;
    esac
  done
  shift $(expr $OPTIND - 1)
  
  ##############
  # Merge file lists
  if [ "$RC_CNT" = "1" ]; then
    cat "$RC_DIR/.rc.list" "$RC_DIR_LOCAL/.rc.local.list" 2>/dev/null | sort -u > "$RC_LIST"
    # Strangely test -s "$RC_LIST" does not work (??)
    if [ -z "$(head -c 1 "$RC_LIST")" ]; then
      rm -I "$RC_LIST"
    fi
  fi

  ##############
  # Startup scripts
  if [ $# -eq 0 ]; then
    export ENV_RC=$((ENV_RC+1))
    rc_log "Source $RC_DIR/.rc"
    if [ -z "$ENV_PROFILE" ]; then # when not already done
      rc_sourcefile "$RC_DIR/.profile"
    fi
    rc_sourcefile "$RC_DIR_LOCAL/.rc.local"
  fi

  ##############
  # Main scripts
  set +f # Enable glob expansion
  local PATTERN
  for PATTERN in "${@:-*}"; do
    if [ -d "$PATTERN" ]; then # Load explicit directories (absolute path needed)
      RC_ALL=1 rc_sourcemod "$PATTERN/*.sh"
    elif [ -f "$PATTERN" ] && echo "$PATTERN" | grep -e '\.sh$' >/dev/null; then # Load explicit files (absolute path needed)
      RC_ALL=1 rc_sourcemod "$PATTERN"
    elif [ -z "$RC_ALL" ] && [ -r "$RC_LIST" ]; then # Load from list
      rc_sourcelist "*$PATTERN*.sh"
    else # Load scripts by pattern search
      rc_sourcemod "$RC_DIR/.rc.d/*$PATTERN*.sh"
      if [ -n "$BASH_VERSION" ]; then
        rc_sourcemod "$RC_DIR/.rc.d/bash/*$PATTERN*.sh"
      fi
      if [ -n "$ANDROID_ROOT" ]; then
        rc_sourcemod "$RC_DIR/.rc.d/android/*$PATTERN*.sh"
      fi
      rc_sourcemod "$RC_DIR_LOCAL/.rc.local.d/*$PATTERN*.sh"
      rc_sourcemod "$RC_DIR_LOCAL/.rc.local.d/*/*$PATTERN*.sh"
    fi   
  done

  ##############
  # End scripts
  if [ $# -eq 0 ]; then
    rc_sourcefile "$RC_DIR/.rc.end"
    rc_sourcefile "$RC_DIR_LOCAL/.rc.local.end"
    export ENV_RC_END=$((ENV_RC_END+1))
  fi

  ##############
  # Cleanup at the last nested call
  if [ "$RC_CNT" = "1" ]; then
    unset -f rc_log rc_sourcemod rc_sourcelist rc_sourcefile
    [ -f "$RC_LIST" ] && rm -I "$RC_LIST"
    # Restore shell options
    eval "$RC_SHELLOPTS"
  fi
  return $RC_ERR
}

################################
# RC directory hooks to load local environment
# Similar to direnv: https://direnv.net
rc_hook() {
  local RET=$?
  [ "$RC_SUBENV" = "$PWD" ] && return $RET
  ! [ -r "$PWD/.rc.local.shell" ] && ! [ -r "$PWD/.rc.local.env" ] && return $RET
  ! command grep -e "^$PWD\$" "${RC_LOCAL_DIR:-$HOME}/.rc.local.allowed" >/dev/null 2>&1 && return $RET
  if [ -r "$PWD/.rc.local.env" ]; then
    export RC_SUBENV="$PWD"
    source "$PWD/.rc.local.env"
  elif [ -r "$PWD/.rc.local.shell" ]; then
    if [ -n "$BASH_VERSION" ]; then
      umask 077
      local TMPFILE="$(mktemp)"
      exec 3<>"$TMPFILE"
      cat <&3 >/dev/null
      cat >&3 <<EOF
trap -- '' SIGINT
rm "$TMPFILE"
export RC_SUBENV="$PWD"
export HOME="$HOME"
export TERM=xterm
cd "$PWD"
source /etc/profile
source ~/.profile
source /etc/bash.bashrc
source ~/.bashrc
export PS1="($(basename "$PWD")) \$PS1"
source .rc.local.shell
trap - SIGINT
EOF
      exec -c bash --rcfile /proc/$$/fd/3
    else
      echo >&2 "Only bash is supported !"
    fi
  fi
  return $RET
}

rc_setup_hook() {
  command -v grep >/dev/null || return 1
  command -v mktemp >/dev/null || return 1
  if [ -n "$BASH_VERSION" ] && [ "${PROMPT_COMMAND%%rc_hook*}" = "${PROMPT_COMMAND}" ]; then
    PROMPT_COMMAND="rc_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
  fi
}

rc_remove_hook() {
  if [ -n "$BASH_VERSION" ] && [ "${PROMPT_COMMAND%%rc_hook*}" != "$PROMPT_COMMAND" ]; then
    PROMPT_COMMAND="${PROMPT_COMMAND%%rc_hook*}${PROMPT_COMMAND##*rc_hook}"
  fi
}

################################
# Global aliases
alias rc='rc_source'

# Setup hook
rc_setup_hook

# Do not autoload user env in non-interactive shells
# This is also done in .bashrc
! [ -t "0" ] && [ -p /dev/stdin ] && RC_NOAUTOLOAD=1

# Source rc files
[ -z "$RC_NOAUTOLOAD" -a ! -f .rc.noautoload ] || [ $# -gt 0 ] && rc_source "$@"
