*vimsupport.txt*                 Vim Support                       Feb 10 2018

Vim Support                                         *vim-support* *vimsupport*

                             Plug-in version 2.5beta
                        for Vim version 7.0 and above
                   Wolfgang Mehner <wolfgang-mehner@web.de>
                      Fritz Mehner <mehner.fritz@web.de>

Vim Support implements a VimL/VimScript-IDE for Vim/gVim/Neovim. It is written
to considerably speed up writing Vim script code in a consistent style. This
is done by inserting complete statements, comments, idioms, and code snippets.
There are many additional hints and options which can improve speed and
comfort when writing Vim scripts.
See the chapter |vimsupport-introduction| for a quick overview and a short
guide to this documentation.

==============================================================================
0.  TABLE OF CONTENTS                                    *vimsupport-contents*
==============================================================================

 1.    Introduction                         |vimsupport-introduction|

 2.    Usage                                |vimsupport-usage|
 2.1    Comments                            |vimsupport-usage-comments|
 2.1.1   End-of-Line Comments               |vimsupport-usage-comments-eol|
 2.1.2   Toggle Comment Lines               |vimsupport-usage-comments-lines|
 2.1.3   Automated Comments                 |vimsupport-usage-comments-auto|
 2.1.4   Further Comments                   |vimsupport-usage-comments-other|
 2.1.5   Keyword Comments                   |vimsupport-usage-comments-keyword|
 2.2    Statements, Idioms, ...             |vimsupport-usage-templates|
 2.3    Perl API                            |vimsupport-usage-api|
 2.4    Documentation                       |vimsupport-usage-docu|
 2.5    Code Snippets                       |vimsupport-usage-snippets|
 2.6    Hardcopy                            |vimsupport-usage-hardcopy|
 2.7    Help                                |vimsupport-usage-help|

 3.    Templates                            |vimsupport-templates|
 3.1    Introduction                        |vimsupport-templates-introduction|
 3.2    Customization                       |vimsupport-templates-custom|
 3.3    Jump Tags                           |vimsupport-templates-jump-tags|
 3.4    Split Tags                          |vimsupport-templates-split-tags|
 3.5    Macros                              |vimsupport-templates-macros|
 3.6    Template Files                      |vimsupport-templates-files|
 3.7    Template Libraries                  |vimsupport-templates-libs|

 4.    Configuration                        |vimsupport-configuration|
 4.1    Menus                               |vimsupport-config-menus|
 4.2    Maps                                |vimsupport-config-maps|
 4.3    Comments                            |vimsupport-config-comments|
 4.4    Snippets                            |vimsupport-config-snippets|
 4.5    Hardcopy                            |vimsupport-config-hardcopy|
 4.6    Windows Particularities             |vimsupport-config-windows|

 5.    System-wide Installation             |vimsupport-system-wide|

 A.    Overview of Mappings                 |vimsupport-mappings|
 B.    Files                                |vimsupport-files|
 C.    Troubleshooting - Known Issues       |vimsupport-troubleshooting|
 D.    Release Notes - Change Log           |vimsupport-release-notes|

==============================================================================
1.  INTRODUCTION                                     *vimsupport-introduction*
==============================================================================

After the first VimL/VimScript file (*.vim) has been opened, the menu "Vim"
appears in the menu bar. It holds entries for all the templates (such as
"Statements->for" or "Idioms->function"), as well as some other functionality.
The letters on the right name maps, which can also be used to access all the
capabilities. See |vimsupport-mappings| for an overview.
The menus are also created if a GUI is not running. They can be used via >
  :emenu Vim.
(Use the arrow keys for navigation, <Enter> to select an entry and <TAB> for
auto completion.)

The features of the plug-in are:
- Turn code lines into comments and vice versa.
    |vimsupport-usage-comments-lines|
- Automatically add comments for functions and their parameters.
    |vimsupport-usage-comments-auto|
- Manage code snippets. |vimsupport-usage-snippets|
- An extendible template library. |vimsupport-templates|

The usage of most features is described in the chapter |vimsupport-usage|.
The chapter |vimsupport-templates| gives a short introduction to the
template system. Various features may require some configuration, which is
documented in the chapter |vimsupport-configuration|. How to do a system-wide
installation is outlined in |vimsupport-system-wide|.

The template system comes with its own documentation, which mainly aims at the
advanced user (see |templatesupport.txt|).

==============================================================================
2.  USAGE                                                   *vimsupport-usage*
==============================================================================

Features are accessible via menu entries and maps. Most maps are preceded by a
mapleader. The leader is a backslash, if the standard configuration is used.

If the root menu 'Vim' is not visible you also can load it with the item
"Load Vim Support" from the "Tools" menu. The item "Unload Vim Support"
can be used to unload the Vim root menu.
(Compare |vimsupport-config-menus|.)

------------------------------------------------------------------------------
2.1  COMMENTS                                      *vimsupport-usage-comments*
------------------------------------------------------------------------------

Besides the templates, there is some other functionality provided in the menu
"Comments".

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  add end-of-line comments   Comments.end-of-line comment   <LocalLeader>cl
  adjust end-of-line com.    Comments.adjust end-of-line c. <LocalLeader>cj
  set end-of-line column     Comments.set end-of-line col.  <LocalLeader>cs

  code to comment            Comments.comment               <LocalLeader>cc
  comment to code            Comments.uncomment             <LocalLeader>co

  automatic function         Comments.func. desc. (auto)    <LocalLeader>ca
    description 
 ----------------------------------------------------------------------------

------------------------------------------------------------------------------

2.1.1  End-of-Line Comments                    *vimsupport-usage-comments-eol*

In NORMAL MODE the menu item 'end-of-line comments' will append a comment to
the current line. In VISUAL MODE this item will append aligned comments to all
marked lines. Marking the 4 lines
>
  let x = 33
  let y = 44
  
  let z = 55
<
and choosing 'end-of-line comments' will yield
>
  let x = 33                                      " |
  let y = 44                                      " 
  
  let z = 55                                      " 
<
The cursor position above is marked by '|'. Empty lines will be ignored.

The default starting column is 49 ( = (multiple of 2,4, or 8) + 1 ). This can
be changed by setting a global variable in the file '.vimrc', e.g. : >
  let g:Vim_LineEndCommColDefault = 65
The starting column can also be set by the menu entry "Comments -> adjust
end-of-line com.". Just position the cursor in an arbitrary column (normal
mode; column number is shown in the Vim status line) and choose this menu
item. This setting is stored individually for each buffer.
If the cursor was at the end of a line you will be asked for a column number
because this position is most likely not the desired starting column.

------------------------------------------------------------------------------

After some copy/paste/change actions comments may be misaligned:
>
  let x = 33                             " this is x
  let y = 44                                      " and y
  let z = 55                                         " and now z
<
Realignment can be achieved with the menu item 'adjust end-of-line com.' In
normal mode the comment (if any) in the current line will be aligned to the
end-of-line comment column (see above) if possible. In visual mode the
comments in the marked block will be aligned:
>
  let x = 33                                    " this is x
  let y = 44                                    " and y
  let z = 55                                    " and now z
<
Another way is to use the hotkey `\cj`. In normal and insert mode the current
line will be adjusted. To adjust n lines starting with the current one use
`n\cj`.

------------------------------------------------------------------------------

2.1.2  Toggle Comment Lines                  *vimsupport-usage-comments-lines*

The comment sign " can be inserted or removed at the beginning of the current
line or for a marked block, using the menu items 'comment' (or `\cc`) and
'uncomment' (or `\co`). A single line needs not to be marked (normal mode,
insert mode).

A marked block
>
  let x = 33                                    " this is x
  let y = 44                                    " and y
  let z = 55                                    " and now z
<
will be changed into (and vice versa)
>
  "let x = 33                                    " this is x
  "let y = 44                                    " and y
  "let z = 55                                    " and now z
<
------------------------------------------------------------------------------

2.1.3  Automated Comments                     *vimsupport-usage-comments-auto*

The menu item 'function description (auto)' generates a function description
from the function head in the current line. The function:
>
  function! s:fct77 ( a, b, c )
    ...
<
will be augmented by the following comment
>
  "===  FUNCTION  =============================================================
  "          NAME:  s:fct77     {{{1
  "   DESCRIPTION:  
  "    PARAMETERS:  a - {+DESCRIPTION+}
  "                 b - {+DESCRIPTION+}
  "                 c - {+DESCRIPTION+}
  "       RETURNS:  
  "============================================================================
  function! s:fct77 ( a, b, c )
    ...
<
The template Comments.function will be used. After typing a brief description,
use <CTRL-J> to jump to the various tags: >
  {+TAG+}
and fill in the information (see Sec. |vimsupport-templates-jump-tags|).

------------------------------------------------------------------------------

2.1.4  Further Comments                      *vimsupport-usage-comments-other*

Frame comments, function descriptions and file header comments are read as
templates from the appropriate files (see |vimsupport-templates|).

------------------------------------------------------------------------------

2.1.5  Keyword Comments                    *vimsupport-usage-comments-keyword*

Preliminary end-of-line comments to document (and find again!) places where
work will be resumed shortly, like:
>
  " :BUG:08.02.2012 12:29:: ... your comment
<
Usually these comments are not meant for the final documentation.

------------------------------------------------------------------------------
2.2  STATEMENTS, IDIOMS, ...                      *vimsupport-usage-templates*
------------------------------------------------------------------------------

The 'Statement' and 'Idioms' menus contain the most frequently used templates.
The menu entries insert some code into the buffer. Almost all menu entries
also have a map, making the same behavior accessible more quickly. E.g. the
menu entry "Idioms -> function" has the map `\if`.

NORMAL MODE, INSERT MODE
-------------------------------

If you choose "Idioms -> function" you will be prompted for the name of the
new function. Enter it, then hit <Enter>. An empty function will be inserted:
>
  function! s:MyFunc ( | )
    <-FUNCTION_BODY->
    return
  endfunction    " ----------  end of function s:MyFunc  ----------
<
The inserted lines will be indented. The character '|' marks the cursor
position after insertion.

VISUAL MODE
-------------------------------

Select the following lines:
>
  echohl WarningMsg
  echo msg
  echohl None
<
If you now use the menu entry "Statements -> if, end", the lines will be
surrounded by the statement:
>
  if |
    echohl WarningMsg
    echo msg
    echohl None
  endif
<
This "split mode" works for many of the menu entries. With the pattern '\w\+'
selected, the map `\xc` or the menu entry "Regex -> capture" will surround it
with a capture: >
  matchlist ( str, '\s\+\w\+' )
will be changed into: >
  matchlist ( str, '\s\+\(\w\+\)' )
<
Lots of submenus are only associated with one map. E.g. all the entries in
"Idiom  -> iterators -> ..." can be accessed via the map `\ii`. You will be
prompted for your choice. Use tab-expansion to display the choices and the
arrow keys to select an item:
>
  dict, keys  dict, key+val  dict, values  file  list
  iterator over : dict, keys
>
------------------------------------------------------------------------------
2.3  PERL API                                           *vimsupport-usage-api*
------------------------------------------------------------------------------

This sub-menu supplies support for the Perl interface of Vim.
For more information please see |if_perl.txt|.

------------------------------------------------------------------------------
2.4  DOCUMENTATION                                     *vimsupport-usage-docu*
------------------------------------------------------------------------------

This sub-menu supplies support for writing Vim help-files in an easy and
consistent way. You can insert a chapter header with 'chapter, text'.
You will be asked for number, name, and tag:
>
  ============================================================================
  3  DOCUMENTATION                                *xxxx*
  ============================================================================
<
Now generate a line for the table of content using 'chapter, ToC':
>
  3    Documentation                                   |xxxx|
<
The number, name, and tag is taken from the last chapter header inserted.

For using the maps while editing help-files set the variable
|g:Vim_CreateMapsForHelp| in ~/.vimrc to 'yes' (default 'no'): >
  let g:Vim_CreateMapsForHelp = 'yes'
Now the maps are created for filetype "help", but only if the buffer is
modifiable. This way, the maps are not created for help buffers when you look
up documentation.

------------------------------------------------------------------------------
2.5  CODE SNIPPETS                                 *vimsupport-usage-snippets*
------------------------------------------------------------------------------

Useful code snippets can be kept in a central place. This way, they can
quickly be inserted into the code, using "Snippets -> read code snippet".
New snippets can be created from existing lines of code by selecting them in
visual mode and saving them using "Snippets -> write code snippet".

Code snippets are kept in a directory which can be changed using the setting
|g:Vim_CodeSnippets|.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  insert code snippet        Snippets.read code snippet     <LocalLeader>nr
  view code snippet          Snippets.view code snippet     <LocalLeader>nv
  create code snippet        Snippets.write code snippet    <LocalLeader>nw
  edit code snippet          Snippets.edit code snippet     <LocalLeader>ne
 ----------------------------------------------------------------------------

Creating a new snippet
----------------------
When nothing is marked, "write code snippet" will write the whole buffer to a
snippet file. Otherwise the marked area will be written to a file.

Insert a snippet
----------------
Select the appropriate file from the snippet directory via "read code snippet".
The inserted lines will be indented.

Indentation / no indentation
----------------------------
Code snippets are normally indented after insertion. To suppress indentation
add the file extension "ni" or "noindent" to the snippet file name, e.g.
>
  parameter_handling.vim.noindent
<
Snippet browser
---------------
Under a GUI a file requester will be put up. Without GUI the filename will be
read from the command line. You can change this behavior by setting a global
variable in your $HOME/.vimrc : >
  let g:Vim_GuiSnippetBrowser = 'commandline'
The default value is 'gui'. 

------------------------------------------------------------------------------
2.6  HARDCOPY                                      *vimsupport-usage-hardcopy*
------------------------------------------------------------------------------

The current buffer, or a range in it, can be quickly printed into a file,
using the menu entry "Run -> hardcopy to filename.ps".

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  hardcopy to postscript     Run.hardcopy to ...            <LocalLeader>rh
 ----------------------------------------------------------------------------

The file will be put into the current working directory. If the user can not
write there, it is put into the home directory instead.

The printheader on top of each page can be set via |g:Vim_Printheader|.

------------------------------------------------------------------------------
2.7  HELP                                              *vimsupport-usage-help*
------------------------------------------------------------------------------

This sub-menu offers convenient access to various documentations.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  open English dictionary    Help.English                   <LocalLeader>he
  view help for keyword      Help.keyword help              <LocalLeader>hk
  open plug-in help          Help.help (Vim-Support)        <LocalLeader>hp
 ----------------------------------------------------------------------------

The entry 'keyword' looks up Vim help for the word (function name, keyword)
under the cursor. If there is no word under the cursor the functions list
will be displayed.

The entry 'English' opens an online dictionary for the word under the cursor.

The browser for opening online documentation, such as the English dictionary,
can be configured by setting a global variable in your ~/.vimrc (see
|g:Templates_InternetBrowserExec| and |g:Templates_InternetBrowserFlags|): >
  let g:Templates_InternetBrowserExec = 'firefox'
<
                                                 *<Plug>VimSupportKeywordHelp*
The keyword help can be mapped to an additional key by the user, using the
mapping `<Plug>VimSupportKeywordHelp`. To map the <F1> key to bring up the
help for the keyword under the cursor, add this to your vim filetype plug-in:
>
  nmap  <buffer>  <F1>  <Plug>VimSupportKeywordHelp
  imap  <buffer>  <F1>  <Plug>VimSupportKeywordHelp
<
See 'vim-support/rc/vim.vim' for an example filetype plug-in.

==============================================================================
3.  TEMPLATES                                           *vimsupport-templates*
==============================================================================

Most of the menu entries insert templates into the current text. Most
templates come with their own map, for fast and convenient access. All maps
start with a mapleader, which can be set to a different value for use within
Vim Support (see |g:Vim_MapLeader|).

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  -various templates-        (automatically generated)      <LocalLeader>...
 ----------------------------------------------------------------------------

The following sections provide a short overview of the template system. See
the documentation of the template system for a more in-depth discussion:
|templatesupport.txt|, particularly |template-support-basics|

------------------------------------------------------------------------------
3.1  INTRODUCTION                          *vimsupport-templates-introduction*
------------------------------------------------------------------------------

This plug-in makes heavy use of an extendible template library. A template
library can assist in speeding up the writing of code, while at the same time
ensuring a consistent style. The templates are written in an easy to use
markup language, which enables the user to customize templates without much
hassle. The menu shortcuts (e.g. 'c' for the Comments menu) and the maps
(e.g. `\ct` to insert date and time) are also defined in the template library.

Templates are short pieces of text which can be included into source code or
text of any other kind. But they are not just plain text, they can be extended
with macros and tags to provide further convenience. Macros can be
automatically replaced with the date or the filename, or they can be replaced
with input from the user, for example the name of a new function.

While inserting a template, the user will often be asked to enter some
replacement text on the command line, for example the name of a function. The
replacement text will then be used in the template while it is inserted.
Hitting <ESC> or entering an empty text will abort template insertion.

------------------------------------------------------------------------------
3.2  CUSTOMIZATION                               *vimsupport-templates-custom*
------------------------------------------------------------------------------

The master template file is `$HOME/.vim/vim-support/templates/Templates` for
a user installation and `$VIM/vimfiles/vim-support/templates/Templates` for
a system-wide installation (see |vimsupport-system-wide|).

The template library is customized via your local template files. Use the menu
entries "Snippets -> edit local templates", "Snippets -> edit custom
templates", or "Snippets -> edit personal templates" to get there.

The master template file can be edited itself to adapt the templates/menus to
the users need. Alternatively, a custom template file can be added (see
|g:Vim_CustomTemplateFile|), which eliminates the need to edit stock
templates.

The personalization (name, email, ..., date and time format) can be done in a
special personalization template file (see |g:Templates_PersonalizationFile|).
It will be read by all plug-ins which support this feature, so it should only
contain basic information not pertaining to a specific programming language.
It can be set up using a wizard, which is run by the map `\ntw` or the menu
entry "Snippets -> template setup wizard". Afterwards, use the menu entry
"Snippets -> reread templates" to apply the changes.

Further template files can be added using the call: >
  call mmtemplates#config#Add ( 'vim', '<PATH>/some.templates', 'example', 'nte' )
The first parameter adds the file to your Vim templates, the second is the
path. The remaining two optional parameters specify the symbolic name for
these templates and the map to edit them. The map is `\nte` in this example,
if the standard mapleader is set.

------------------------------------------------------------------------------
3.3  JUMP TAGS                                *vimsupport-templates-jump-tags*
------------------------------------------------------------------------------

Templates can include special tags, which mark positions where text needs to
be added: >
  {+TAGNAME+} {-TAGNAME-}
  <+TAGNAME+> <-TAGNAME->
  [+TAGNAME+] [-TAGNAME-]
<
  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  jump to next tag           -                              <CTRL-J>
  delete optional tag        -                              <CTRL-D>
 ----------------------------------------------------------------------------

Use the <CTRL-J> to jump to the next tag. The maps works in normal and insert
mode. Use <CTRL-D> to delete optional tags on the same line, for example: >
  strpart ( <+src+>, <+start+>, [+len+] )
The optional argument "len" can be written down after jumping to the tag
using <CTRL-J> or deleted together with the comma using <CTRL-D>. The optional
tags are: `[+TAGNAME+]` `[-TAGNAME-]`

The tags written with minus signs are removed when the template is used in
visual mode, compare the next section: `{-TAGNAME-}` `<-TAGNAME->` `[-TAGNAME-]`

------------------------------------------------------------------------------
3.4  SPLIT TAGS                              *vimsupport-templates-split-tags*
------------------------------------------------------------------------------

Some templates include so-called split tags and can use to surround some lines
of code, or to surround a part of the current line.

Example:

The template "Statements.if, else" contains a split tag for the if-branch:
>
  == Statements.if, else == map:sie, sc:i ==
  if <CURSOR>
    <SPLIT><-IF_PART->
  else
    <+ELSE_PART+>
  endif
  == ENDTEMPLATE ==
<
Consider the lines:
>
  echohl WarningMsg
  echo msg
  echohl None
<
After selecting these three lines and inserting the template, the result looks
like this:
>
  if |
    echohl WarningMsg
    echo msg
    echohl None
  else
    <+ELSE_PART+>
  endif
<
The tag `<-IF_PART->`is removed because it is written with a minus signs. The
cursor is placed where the condition must go. Use <CTRL-J> to jump to the
else-branch.

------------------------------------------------------------------------------
3.5  MACROS                                      *vimsupport-templates-macros*
------------------------------------------------------------------------------

Macros are placeholders which get replace while a template is inserted. The
template library defines several macros used for personalization:
>
  SetMacro( 'AUTHOR',       'YOUR NAME' )
  SetMacro( 'AUTHORREF',    '' )
  SetMacro( 'EMAIL',        '' )
  SetMacro( 'ORGANIZATION', '' )
  SetMacro( 'COMPANY',      '' )
  SetMacro( 'COPYRIGHT',    'Copyright (c) |YEAR|, |AUTHOR|' )
  SetMacro( 'LICENSE',      'GNU General Public License' )
<
These macros are used by some templates, e.g. the file prolog. Arbitrary
user-defined macros are possible. The macro name must follows the rules for a
C language identifier: first character letter or underscore; case matters;
digits are allowed beginning with the second character.
>
Some predefined macros can help make comments much richer:
>
  |BASENAME|        filename without path and suffix
  |FILENAME|        filename without path
  |PATH|            path without filename
  |SUFFIX|          filename suffix

  |DATE|            the date
  |TIME|            the time
  |YEAR|            the year
<
The date and time formats can be set in the template library, see |strftime()|
for the format specifiers:
>
  SetFormat( 'DATE', '%D'      )
  SetFormat( 'TIME', '%H:%M'   )
  SetFormat( 'YEAR', 'year %Y' )
<
This sets the format for the date to the preferred representation for your
current locale, the time will be inserted as 10:24 and the year will be
represented using four digits.

------------------------------------------------------------------------------
3.6  TEMPLATE FILES                               *vimsupport-templates-files*
------------------------------------------------------------------------------

The template definitions are spread out over several template files. These can
contain comments, lines starting with a section sign (§) are ignored.

Template files can include several further files: >
  IncludeFile( 'comments.templates' )
An included file will be processed before the remainder of the including file.

The template behind a menu item is identified by a given name. The first part
of the name identifies the menu name, the second part identifies the item.
A template definition starts with a template header with the following syntax:

  == menu_name.template_name == options ==

The options are described here: |template-support-options|

------------------------------------------------------------------------------
3.7  TEMPLATE LIBRARIES                            *vimsupport-templates-libs*
------------------------------------------------------------------------------

The template system comes with several auxiliary functions.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  edit the global template   Snippets.edit global templates <LocalLeader>ntg
    library (^1)
  edit the local template    Snippets.edit local templates  <LocalLeader>ntl
    library
  edit the custom template   Snippets.edit custom templates <LocalLeader>ntc
    library
  edit the personal templ.   Snippets.edit personal templ.  <LocalLeader>ntp
    library
  reread the templates       Snippets.reread templates      <LocalLeader>ntr
  setup wizard               Snippets.template setup wizard <LocalLeader>ntw
  choose a style             Snippets.choose style          <LocalLeader>nts
 ----------------------------------------------------------------------------

(^1) system-wide installation only

The menu items "Snippets -> edit ... templates" open various template files. The
stock templates are usually located in the "local" template file: >
  ~/.vim/vim-support/templates/Templates
The template files named "custom" and "personal" can be used for
customization, which avoids editing the stock templates.
There may be dependent files loaded from the main files. Change whatever file
you want, save it, and click on the menu item "reread templates" to read in
the file(s) and to rebuild the internal representation of the templates.

For how to use these files to configure and personalize the template library,
see |vimsupport-templates-custom|. For help with setting up the template
library, use the setup wizard:
  Vim -> Snippets -> template setup wizard

Template Browser
----------------
When editing a template file, it is selected via |:Explore|. You can change
this behavior by setting a global variable in your ~/.vimrc (see
|g:Templates_TemplateBrowser|):
>
  let g:Templates_TemplateBrowser = 'browse'
<
Template Style
--------------
The template system supports different template styles. If there are more than
one style the menu item "choose style" let you choose a style on the fly.

Template Locations
------------------
                            *g:Vim_LocalTemplateFile* *g:Vim_GlobalTemplateFile*
                                                    *g:Vim_CustomTemplateFile*
The variables `g:Vim_LocalTemplateFile` and `g:Vim_GlobalTemplateFile` set the
locations and names of the local and global template files, respectively.
The standard locations of the template files can be changed via these
configuration variables, e.g.: >
  let g:Vim_CustomTemplateFile = $HOME.'/.vim/my-templates/vim.templates'
<
  Variable                     Default Linux
 ----------------------------------------------------------------------------
  g:Vim_CustomTemplateFile     $HOME/.vim/templates/vim.templates
  g:Vim_GlobalTemplateFile     $VIMRUNTIME/vim-support/templates/Templates
  g:Vim_LocalTemplateFile      $HOME/.vim/vim-support/templates/Templates
 ----------------------------------------------------------------------------

  Variable                     Default Windows
 ----------------------------------------------------------------------------
  g:Vim_CustomTemplateFile     $HOME/vimfiles/templates/vim.templates
  g:Vim_GlobalTemplateFile     $VIMRUNTIME/vim-support/templates/Templates
  g:Vim_LocalTemplateFile      $HOME/vimfiles/vim-support/templates/Templates
 ----------------------------------------------------------------------------

The personalization file is located in a directory relative to |runtimepath|: >
  <RUNTIMEPATH>/templates/personal.templates
For configuring the personalization file, see |g:Templates_PersonalizationFile|.

==============================================================================
4.  CONFIGURATION                                   *vimsupport-configuration*
==============================================================================

The basic configuration is done via a number of global variables, which can be
set in the `.vimrc` file.

  Variable                  Default       Description
 ----------------------------------------------------------------------------
  |g:Vim_CreateMapsForHelp|   'no'          create the mappings in modifiable
                                            help buffers

  |g:Vim_LoadMenus|           'auto'        when to load the menus ('startup',
                                            'auto' or 'manual')
  |g:Vim_RootMenu|            '&Vim'        name and shortcut of the root menu
  |g:Vim_MapLeader|           ''            the |maplocalleader| used for maps
  |g:Vim_Ctrl_j|              'yes'         generate the <CTRL-J> map
  |g:Vim_Ctrl_d|              'yes'         generate the <CTRL-D> map

  |g:Vim_LineEndCommColDefault|             standard column used for end-of-
                            49              line comments

  |g:Vim_CodeSnippets|        (see below)   directory with code snippers
  |g:Vim_GuiSnippetBrowser|   'gui'         browser to select code snippets

  |g:Vim_LocalTemplateFile|   (see Chp. 3)  the local top-level template file
  |g:Vim_GlobalTemplateFile|  (see Chp. 3)  the global top-level template file
  |g:Vim_CustomTemplateFile|  (see Chp. 3)  the optional custom template file
  |g:Templates_PersonalizationFile|
                            (see Chp. 3)  the personalization template file

  |g:Vim_Printheader|         '...'         printheader used for hardcopy

  |g:Templates_InternetBrowserExec|         the browser executable
  |g:Templates_InternetBrowserFlags|        additional browser flags
 ----------------------------------------------------------------------------

Further customization is carried out in the template library, see
|vimsupport-templates-custom|.

------------------------------------------------------------------------------
                                                     *g:Vim_CreateMapsForHelp*
In order to use the mappings for the templates listed in "Documentation" while
writing helpfiles, the creation of these maps has to be allowed explicitly by
the user. (compare |vimsupport-usage-docu|)

Add this line to your .vimrc: >
  let g:Vim_CreateMapsForHelp = 'yes'
Now the maps are created for filetype "help", but only if the buffer is
modifiable. This way, the maps are not created for help buffers when you look
up documentation.

------------------------------------------------------------------------------
4.1  MENUS                                           *vimsupport-config-menus*
------------------------------------------------------------------------------
                                                             *g:Vim_LoadMenus*
The creation of the menus is controlled by `g:Vim_LoadMenus`. The default
setting: >
  let g:Vim_LoadMenus = 'auto'
causes the templates to be loaded and the menus to be created when the first
VimL file is opened.
The menus appear right away after starting Vim with the setting: >
  let g:Vim_LoadMenus = 'startup'
This has the disadvantage that the templates have to be loaded during the
startup of Vim, which might cause a noticeable slowdown on older systems.
The automatic creation of the menus is prevented by: >
  let g:Vim_LoadMenus = 'manual'
Now the menus can only be loaded by using the tool menu entry "Tools -> Load
Vim Support".

                                                    *g:Vim_CreateMenusDelayed*
The old setting `g:Vim_CreateMenusDelayed` still works for backwards
compatibility, use the above values for |g:Vim_LoadMenus| instead.

                                                              *g:Vim_RootMenu*
The name and shortcut of the root menu is set via `g:Vim_RootMenu`. The
character prefixed by '&' will be the shortcut.
>
Example: >
  let g:Vim_RootMenu = '&Plugin.&Vim'
Creates the Vim menu as a submenu of "Plugin", and sets the shortcut to 'l'.

------------------------------------------------------------------------------
4.2  MAPS                                             *vimsupport-config-maps*
------------------------------------------------------------------------------
                                                             *g:Vim_MapLeader*
All the maps the plug-in creates use |maplocalleader|. It can be changed by
setting the variable `g:Vim_MapLeader`. If it contains the empty string,
Vim's default (backslash) is used.

Example: >
  let g:Vim_MapLeader = '#'
Sets the mapleader to '#'.

                                                          *Vim_SetMapLeader()*
                                                        *Vim_ResetMapLeader()*
The configured mapleader can also be used in the ftplugin, by calling the
functions `Vim_SetMapLeader()` and `Vim_ResetMapLeader()`. The maps created
between the two calls will use |g:Vim_MapLeader| as the |<LocalLeader>|:
>
  call Vim_SetMapLeader ()

  map  <buffer>  <LocalLeader>eg  :echo "Example Map :)"<CR>

  call Vim_ResetMapLeader ()
<
                                                   *g:Vim_Ctrl_j* *g:Vim_Ctrl_d*
The creation of the <CTRL-J> and <CTRL-D> maps is controlled by the variables
`g:Vim_Ctrl_j` and `g:Vim_Ctrl_d`, respectively. To disable <CTRL-D>, set the
variable to "no": >
  let g:Vim_Ctrl_d = 'no'
<
------------------------------------------------------------------------------
4.3  COMMENTS                                     *vimsupport-config-comments*
------------------------------------------------------------------------------
                                                 *g:Vim_LineEndCommColDefault*
The standard column used for end-of-line comments is configured using
`g:Vim_LineEndCommentColumn`. The column can then be set individually for each
buffer, using the menu entry "Comments -> set end-of-line com. col.".

Example: >
  g:Vim_LineEndCommColDefault = 59
<
------------------------------------------------------------------------------
4.4  SNIPPETS                                     *vimsupport-config-snippets*
------------------------------------------------------------------------------
                                                          *g:Vim_CodeSnippets*
The variable `g:Vim_Snippets` sets the location of the code snippet directory.
The default value depends on the type of installation and the operating
system.

(Path separators are always written as slashes '/', even for Windows.)

For a local installation, the default will be (UNIX/Linux): >
  s:Vim_Snippets = $HOME.'/.vim/vim-support/codesnippets/'
or (Windows): >
  s:Vim_Snippets = $HOME.'/vimfiles/vim-support/codesnippets'
<
For a sytem-wide installation, the default will be: >
  s:Vim_Snippets = $VIM.'/vimfiles/vim-support/codesnippets'
<
Example:

To set a different code snippet directory, add this line to your vimrc: >
  let g:Vim_Snippets = $HOME.'/myvim/vimscript/codesnippets/'
<
                                                     *g:Vim_GuiSnippetBrowser*
Code snippets can either be selected in a file browser, by setting: >
  let g:Vim_GuiSnippetBrowser = 'gui'
or on the command line by setting: >
  let g:Vim_GuiSnippetBrowser = 'commandline'
<
------------------------------------------------------------------------------
4.5  HARDCOPY                                     *vimsupport-config-hardcopy*
------------------------------------------------------------------------------
                                                           *g:Vim_Printheader*
The printheader used by "Run -> hardcopy to filename.ps" is set via the
variable `g:Vim_Printheader`. It is temporarily set as the value of
'printheader' while printing the hardcopy. See the documentation of the
option 'printheader' for the possible contents of `g:Vim_Printheader`. The
default is: >
  let g:Vim_Printheader = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"
<
The behavior can be changed on the fly by settings the variable to a different
value on the command line.

------------------------------------------------------------------------------
4.6  WINDOWS PARTICULARITIES                       *vimsupport-config-windows*
------------------------------------------------------------------------------

For a user installation the plug-in should go into the directory structure
below the folder: >
  $HOME/vimfiles/
for a system installation below: >
  $VIM/vimfiles/
<
The values of the two variables can be found from inside Vim: >
  :echo $HOME
and >
  :echo $VIM
<
The configuration files for the user are `$HOME/_vimrc` and `$HOME/_gvimrc`,
and for the system `$VIM/_vimrc` and `$VIM/_gvimrc`.

==============================================================================
5.  SYSTEM-WIDE INSTALLATION                          *vimsupport-system-wide*
==============================================================================

A system-wide installation (one installation for all users) is done as
follows.

As *** SUPERUSER *** :

(1) Find the Vim installation directory.
The Vim ex-command `:echo $VIM` gives '/usr/local/share/vim' or something like
that. Beyond this directory you will find the Vim installation, e.g. in
'/usr/local/share/vim/vim73' if Vim version 7.3 has been installed.

(2) Create a new subdirectory 'vimfiles', e.g. '/usr/local/share/vim/vimfiles'.

(3) Install Vim Support
Copy the archive 'vim-support.zip' to this new directory and unpack it: >
  unzip vim-support.zip
<
(4) Generate the help tags: >
  :helptags $VIM/vimfiles/doc
<
SPECIAL CASES. Some Linux distributions use non-standard names for Vim
directories. SUSE has a directory '/usr/share/vim/site' to put plug-ins in.
These directories will not be found automatically. After installing the
plug-in below '/usr/share/vim/site' the use of the templates will be enabled
by the following line in '$HOME/.vimrc':
>
  let g:Vim_GlobalTemplateFile = '/usr/share/vim/site/vim-support/templates/Templates'
<
------------------------------------------------------------------------------

As *** USER *** :

Use the template setup wizard:
  Vim -> Snippets -> template setup wizard
to create a personalization file and/or a custom template file.

The personalization file will be read by all plug-ins supporting this feature,
and should contain only information relevant for all template libraries. You
can set some macros in this file with your personal information in order to
obtain personalized comments, e.g. something like this:
>
  SetMacro( 'AUTHOR',      'Wolfgang Mehner' )
  SetMacro( 'AUTHORREF',   'WM' )
  SetMacro( 'EMAIL',       'wolfgang-mehner@web.de' )
  SetMacro( 'COPYRIGHT',   'Copyright (c) |YEAR|, |AUTHOR|' )
<
Use the custom template file for Vim templates which override the global
templates or to add new ones.

The old system (before version 2.4), using a "local" template file, >
  ~/.vim/vim-support/templates
is still supported for backwards compatibility.

Create your private snippet directory: >
  mkdir --parents  $HOME/.vim/vim-support/codesnippets
You may want to copy the snippets coming with this plug-in (in
$VIM/vimfiles/vim-support/codesnippets) into the new directory or to set a
link to the global directory.

==============================================================================
A.  OVERVIEW OF MAPPINGS                                 *vimsupport-mappings*
==============================================================================

Almost all functionality is accessible using key mappings. These mappings are
also described in the reference card 'vim-support/doc/vim-hotkeys.pdf'.

All mappings are filetype specific; they are only defined for buffers with
filetype 'vim' to minimize conflicts with mappings from other plug-ins.
Furthermore, the mapleader can be changed using the setting |g:Vim_MapLeader|.

Some mappings can be used with a range (of lines). In normal mode >
  \cl
appends a end-of-line comment to the current line, whereas >
  4\cl
appends end-of-line comments to the 4 lines starting with the current line.

Hint: Typing speed matters. The combination of a leader ('\') and the
following character(s) will only be recognized for a short time.

Legend:  (i) insert mode, (n) normal mode, (v) visual mode
         [n] range

  -- Help ----------------------------------------------

     \he     open an English dictionary for the   (n, i)
             word under the cursor
     \hk     displays help for the function name  (n, i)
             under the cursor (Vim help)
     \hp     displays plugin help                 (n, i)

  -- Comments ------------------------------------------

  [n]\cl     end-of-line comment             (n, i, v)
  [n]\cj     adjust end-of-line comments     (n, i, v)
     \cs     set end-of-line comment column  (n)
  [n]\cc     comment code                    (n, i, v)
  [n]\co     uncomment code                  (n, i, v)
     \ca     function description (auto)     (n, i, v)
     \cfr    frame comment                   (n, i)
     \cfu    function description            (n, i)
     \ch     file header                     (n, i)
     \cd     date                            (n, i)
     \ct     date & time                     (n, i)
     \ck     keyword comments                (n, i)
     \cma    plugin macros                   (n, i)

  -- Statements -----------------------------------------

     \sv     let variable                    (n, i)
     \sl     let list                        (n, i)
     \sd     let dictionary                  (n, i)
     \sf     for                             (n, i, v)
     \sif    if ... endif                    (n, i, v)
     \sie    if ... else ... endif           (n, i, v)
     \sei    elseif                          (n, i)
     \sel    else                            (n, i)
     \sw     while                           (n, i, v)
     \st     try ... catch                   (n, i, v)

  -- Idioms ----------------------------------------------

     \ii     iterators                       (n, i, v )
     \if     function                        (n, i, v )

  -- Regular Expression ----------------------------------

     \xc     capture                         (n, i, v )
     \xbc    branch                          (n, i, v )
     \xbn    branch, no capture              (n, i, v )
     \xw     word                            (n, i )
     \xpc    POSIX character classes         (n, i )
     \xs     switches                        (n, i )

  -- Perl ------------------------------------------------

     \ps     Perl snippet                    (n, i)
     \pd     Vim::DoCommand()                (n, i)
     \pe     Vim::Eval()                     (n, i)
     \pm     Vim::Msg( "" )                  (n, i)
     \pmc    Vim::Msg( "", "Comment" )       (n, i)
     \pme    Vim::Msg( "", "Warning" )       (n, i)
     \pmw    Vim::Msg( "", "ErrorMsg" )      (n, i)

  -- Documentation ---------------------------------------

     \dcc    chapter, contents               (n, i)
     \dcs    section, contents               (n, i)
     \dcu    subsection, contents            (n, i)
     \dtc    chapter, text                   (n, i)
     \dts    section, text                   (n, i)
     \dtu    subsection, text                (n, i)
     \df     function description            (n, i)
     \de     example                         (n, i, v)
     \dl     list item                       (n, i)

  -- Snippets --------------------------------------------

     \nr     read code snippet                (n, i)
     \nw     write code snippet               (n, i, v)
     \ne     edit code snippet                (n, i)

     \ntg    edit global template file        (n, i)
     \ntl    edit local template file         (n, i)
     \ntc    edit custom template file        (n, i)
     \ntp    edit personal template file      (n, i)
     \ntr    reread template file             (n, i)
     \ntw    template setup wizard            (n, i)
     \nts    choose template style            (n, i)

  -- Run -------------------------------------------------

     \rh     hardcopy buffer to FILENAME.ps   (n, i)
     \rs     settings and hot keys            (n, i)

==============================================================================
B.  FILES                                                   *vimsupport-files*
==============================================================================

vim-support/README.md             Release notes, installation description.

autoload/mmtemplates/*            The template system.

doc/vimsupport.txt                The help file for Vim Support.
doc/templatesupport.txt           The help file for the template system.

plugin/vim-support.vim            The VimL plug-in for Vim/gVim/Neovim.

vim-support/codesnippets/         Some code snippets as a starting point.

vim-support/templates/*           The template files.

--------------------------------------------------------------
 The following files and extensions are for convenience only.
 `vim-support.vim` will work without them.
--------------------------------------------------------------

ftdetect/template.vim
ftplugin/template.vim
syntax/template.vim               Additional files for working with templates.

vim-support/...
  .../doc/vim-hotkeys.pdf         Reference card for the key mappings.
  .../doc/ChangeLog               The change log.

vim-support/...
  .../rc/customization.gvimrc     Additional settings for use in .gvimrc.
  .../rc/customization.vimrc      Additional settings for use in .vimrc:
                                    incremental search, tabstop, hot keys,
                                    font, use of dictionaries, ...
                                  The file is commented. Append it to your
                                  .vimrc if you like.

  .../rc/vim.vim                  Suggestion for a filetype plug-in.
  .../rc/*.templates              Sample template files for customization.
                                  Used by the customization template setup wizard.

==============================================================================
C.  TROUBLESHOOTING - KNOWN ISSUES                *vimsupport-troubleshooting*
==============================================================================

* I do not see any new main menu item.
  - Was the archive extracted into the right directory?

* How can I see what was loaded?
  - Use ':scriptnames' from the Vim command line.

* No main menu item.
  - Loading of plugin files must be enabled. If not use
      :filetype plugin on
    This is the minimal content of the file '$HOME/.vimrc'. Create one if
    there is none, or better use customization.vimrc.

* Some hotkeys do not work.
  - The hotkeys might be in use by your graphical desktop environment. The key
    settings can usually be redefined.

==============================================================================
D.  RELEASE NOTES - CHANGE LOG                      *vimsupport-release-notes*
==============================================================================

See files 'vim-support/README.md' and 'vim-support/doc/ChangeLog'.

==============================================================================
vim:tw=78:expandtab:ts=2:ft=help:norl:
